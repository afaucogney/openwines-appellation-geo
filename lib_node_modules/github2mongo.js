/**
 * Created by anthonyfaucogney on 24/06/2015.
 */
'use strict';

var cheerio = require("cheerio");
var request = require("request");
var async = require("async");
var mongodb = require('mongodb');

var GITHUB_URL = "https://github.com/OpenWines/Open-Data/tree/master/dept_44";
var MONGODB_URI = "mongodb://anthony:guignols@ds043997.mongolab.com:43997/openwines-appellation-geoloc";

var OpenWinesDB, Appellations;

// Extends String

if (typeof String.prototype.endsWith !== 'function') {
  String.prototype.endsWith = function (suffix) {
    return this.indexOf(suffix, this.length - suffix.length) !== -1;
  };
}

// Initialize connection once

mongodb.MongoClient.connect(MONGODB_URI, function (err, database) {
  if (err) throw err;

  OpenWinesDB = database;
  Appellations = OpenWinesDB.collection('Appellation');

});

var getGeoJsonUrlFromGithubPage = function (callback) {
  console.log("GET GEOJSON URL from github");
  //console.log(GITHUB_URL);
  request({
      method: 'GET',
      url   : GITHUB_URL
    }, function (err, response, body) {
      if (err) return console.error(err);

      // Tell Cherrio to load the HTML
      var $ = cheerio.load(body);

      var geoJSONurls = [];

      $('a.js-directory-link').each(function (i, elem) {
        var elemUrl = elem.attribs.href;
        if (elemUrl.endsWith(".geojson")) {
          var rawGitUrl = "https://rawgit.com"; //https://raw.githubusercontent.com/
          elemUrl = elemUrl.replace("\/blob\/", "\/");
          //console.log(elemUrl)
          var geoJsonUrl = rawGitUrl + elemUrl;
          geoJSONurls.push(geoJsonUrl);
        }
      });

      callback(null, geoJSONurls);
    }
  );
};

var getRawGeoJSON = function (geoJSONUrl, callback) {
  console.log("GET RAW JSON:" + geoJSONUrl);
  request({
    method: 'GET',
    url   : geoJSONUrl
  }, function (err, response, body) {

    // console.log("+ " + urlParsed + " out of " + urlsSize + " + " + geoJSONUrl);
    //   if (body != "" && body != null)
    callback(null, JSON.parse(body));

  });

};


var pushToMongo = function (geoJSONobjects, callback) {
  console.log("PUSH TO MONGO");

  Appellations.insert(geoJSONobjects, function (err, data) {
      if (err) {
        console.log(err);
        callback(err);
      }
      urlParsed--;
      console.log("+ " + urlParsed + " out of " + urlsSize + " + ");
      //console.log(data);
      callback(null, data);

    }
  );
};

var getAndPushSingle = function (url, cb) {
  console.log("GET AND PUSH:" + url);
  async.waterfall([
    async.apply(getRawGeoJSON, url),
    pushToMongo
  ], function (err, result) {
    // result now equals 'done'
    //console.log(result);
    cb(null, result);
  });
};

var urlsSize;
var urlParsed;

var getAndPushRawGeoJSON = function (urls, callback) {
  console.log("GET AND PUSH ALLS");
  console.log(urls);
  urlsSize = urls.length;
  urlParsed = urlsSize;


  async.mapLimit(urls, 1, getAndPushSingle, function (err, results) {
    // results is now an array of stats for each file
    console.log(results)
  });


};


exports.fetchGeoJSONFromGithub2Mongo = function (callback) {
  async.waterfall([
    getGeoJsonUrlFromGithubPage,
    getAndPushRawGeoJSON
  ], function (err, result) {
    // result now equals 'done'
    //console.log(result);
    callback(null, result);
  });
}


